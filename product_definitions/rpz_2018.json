{
  "description": "Riparian Zones, LCLU 2018",
  "steps": [
    {
      "check_ident": "qc_tool.vector.unzip",
      "required": true
    },
    {
      "check_ident": "qc_tool.vector.naming",
      "required": true,
      "parameters": {
        "formats": [".gdb", ".gpkg", ".shp"],
        "layer_names": {
          "rpz": "^rpz_(?P<aoi_code>du[0-9]{3})[a-z]_lclu_2012_2018_v[0-9]{2}$"
        },
        "aoi_codes": ["du001", "du002", "du003", "du004", "du005", "du006", "du007", "du008", "du009",
                      "du010", "du011", "du012", "du013", "du014", "du015", "du016", "du017", "du018", "du019",
                      "du020", "du021", "du022", "du023", "du024", "du025", "du026", "du027", "du028", "du029",
                      "du030", "du031", "du032", "du033", "du034", "du035", "du036", "du037", "du038", "du039",
                      "du040", "du041", "du042", "du043"],
        "boundary_source": "boundary_rpz.shp",
        "reference_year": "2018"
      }
    },
    {
      "check_ident": "qc_tool.vector.attribute",
      "required": true,
      "parameters": {
        "layers": ["rpz"],
        "required": {
          "uid": "string",
          "du_id": "string",
          "changecode": "string",
          "area_ha": "real",
          "code_1_12": "integer",
          "code_2_12": "integer",
          "code_3_12": "integer",
          "code_4_12": "integer",
          "ua_12": "string",
          "nodata_12": "integer",
          "comment_12": "string",
          "code_1_18": "integer",
          "code_2_18": "integer",
          "code_3_18": "integer",
          "code_4_18": "integer",
          "ua_18": "string",
          "nodata_18": "integer",
          "comment_18": "string"
        },
        "ignored": [
          "shape_area",
          "shape_length"
        ]
      }
    },
    {
      "check_ident": "qc_tool.vector.epsg",
      "required": true,
      "parameters": {
        "layers": ["rpz"],
        "epsg": 3035,
        "auto_identify_epsg": true
      }
    },
    {
      "check_ident": "qc_tool.vector.import2pg",
      "required": true
    },
    {
      "check_ident": "qc_tool.vector.inspire",
      "required": false,
      "parameters": {
        "layers": ["rpz"]
      }
    },
    {
      "check_ident": "qc_tool.vector.unique",
      "required": false,
      "parameters": {
        "layers": ["rpz"],
        "unique_keys": ["uid"]
      }
    },
    {
      "check_ident": "qc_tool.vector.enum",
      "required": false,
      "parameters": {
        "layers": ["rpz"],
        "exclude_column_name": "ua_18",
        "column_defs": [["nodata_12", [0, 1]],
                        ["nodata_18", [0, 1]],
                        ["code_1_12", [0, 1, 2, 3, 4, 5, 6, 7, 8]],
                        ["code_2_12", [0,
                                       11, 12, 13, 14,
                                       21, 22, 23,
                                       30, 31, 32, 33, 34, 35, 36,
                                       40, 41, 42,
                                       50, 51, 52, 53,
                                       60, 61, 62, 63,
                                       70, 71, 72,
                                       80, 81, 82, 83, 84]],
                        ["code_3_12", [0,
                                       111, 112,
                                       121, 122, 123, 124,
                                       131, 132,
                                       140,
                                       211, 212,
                                       220, 221, 222,
                                       231, 232, 233, 234,
                                       300,
                                       311, 312,
                                       321, 322,
                                       331, 332,
                                       340,
                                       350,
                                       360,
                                       400,
                                       410,
                                       421, 422,
                                       500,
                                       510,
                                       520,
                                       530,
                                       600,
                                       610,
                                       621, 622,
                                       631, 632, 633,
                                       700,
                                       711, 712,
                                       721, 722, 723,
                                       800,
                                       811, 812, 813,
                                       821, 822, 823, 824,
                                       831, 832,
                                       840]],
                        ["code_4_12", [0,
                                       1111, 1112, 1113, 1120,
                                       1210, 1220, 1230, 1240,
                                       1310, 1320,
                                       1400,
                                       2110, 2120,
                                       2200, 2210, 2220,
                                       2310, 2320, 2330, 2340,
                                       3000,
                                       3110, 3120,
                                       3210, 3220,
                                       3310, 3320,
                                       3400,
                                       3500,
                                       3600,
                                       4000,
                                       4100,
                                       4210, 4220,
                                       5000,
                                       5100,
                                       5200,
                                       5300,
                                       6000,
                                       6100,
                                       6210, 6220,
                                       6310, 6320, 6330,
                                       7000,
                                       7110, 7121, 7122,
                                       7210, 7220, 7230,
                                       8000,
                                       8110, 8120, 8130,
                                       8210, 8220, 8230, 8240,
                                       8310, 8320,
                                       8400]],
                        ["code_1_18", [0, 1, 2, 3, 4, 5, 6, 7, 8]],
                        ["code_2_18", [0,
                                       11, 12, 13, 14,
                                       21, 22, 23,
                                       30, 31, 32, 33, 34, 35, 36,
                                       40, 41, 42,
                                       50, 51, 52, 53,
                                       60, 61, 62, 63,
                                       70, 71, 72,
                                       80, 81, 82, 83, 84]],
                        ["code_3_18", [0,
                                       111, 112,
                                       121, 122, 123, 124,
                                       131, 132,
                                       140,
                                       211, 212,
                                       220, 221, 222,
                                       231, 232, 233, 234,
                                       300,
                                       311, 312,
                                       321, 322,
                                       331, 332,
                                       340,
                                       350,
                                       360,
                                       400,
                                       410,
                                       421, 422,
                                       500,
                                       510,
                                       520,
                                       530,
                                       600,
                                       610,
                                       621, 622,
                                       631, 632, 633,
                                       700,
                                       711, 712,
                                       721, 722, 723,
                                       800,
                                       811, 812, 813,
                                       821, 822, 823, 824,
                                       831, 832,
                                       840]],
                        ["code_4_18", [0,
                                       1111, 1112, 1113, 1120,
                                       1210, 1220, 1230, 1240,
                                       1310, 1320,
                                       1400,
                                       2110, 2120,
                                       2200, 2210, 2220,
                                       2310, 2320, 2330, 2340,
                                       3000,
                                       3110, 3120,
                                       3210, 3220,
                                       3310, 3320,
                                       3400,
                                       3500,
                                       3600,
                                       4000,
                                       4100,
                                       4210, 4220,
                                       5000,
                                       5100,
                                       5200,
                                       5300,
                                       6000,
                                       6100,
                                       6210, 6220,
                                       6310, 6320, 6330,
                                       7000,
                                       7110, 7121, 7122,
                                       7210, 7220, 7230,
                                       8000,
                                       8110, 8120, 8130,
                                       8210, 8220, 8230, 8240,
                                       8310, 8320,
                                       8400]]]
      }
    },
    {
      "check_ident": "qc_tool.vector.nodata",
      "required": false,
      "parameters": {
        "layers": ["rpz"],
        "nodata_column_name": "nodata_12",
        "nodata_value": 1,
        "dep_column_names": ["code_1_12", "code_2_12", "code_3_12", "code_4_12"],
        "dep_value": 0
      }
    },
    {
      "check_ident": "qc_tool.vector.nodata",
      "required": false,
      "parameters": {
        "layers": ["rpz"],
        "nodata_column_name": "nodata_18",
        "nodata_value": 1,
        "dep_column_names": ["code_1_18", "code_2_18", "code_3_18", "code_4_18"],
        "dep_value": 0
      }
    },
    {
      "check_ident": "qc_tool.vector.singlepart",
      "required": false,
      "parameters": {
        "layers": ["rpz"]
      }
    },
    {
      "check_ident": "qc_tool.vector.geometry",
      "required": false,
      "parameters": {
        "layers": ["rpz"]
      }
    },
    {
      "check_ident": "qc_tool.vector.area",
      "required": false,
      "parameters": {
        "layers": ["rpz"],
        "area_column_name": "area_ha",
        "unit": 10000,
        "tolerance": 0.001
      }
    },
    {
      "check_ident": "qc_tool.vector.gap",
      "required": false,
      "parameters": {
        "layers": ["rpz"],
        "du_column_name": "du_id"
      }
    },
    {
      "check_ident": "qc_tool.vector.mmu",
      "required": false,
      "parameters": {
        "layers": ["rpz"],
        "complex_change": {"initial_code_column_name": "code_4_12",
                           "final_code_column_name": "code_4_18",
                           "area_column_name": "area_ha"},
        "general_where": [" layer.ua_18 IS NOT NULL",
                          "OR",
                          " layer.area_ha >= 0.5"],
         "exception_where": [" ((meta.is_marginal",
                             "   OR EXISTS (SELECT FROM neighbours(meta.fid) WHERE ua_18 IS NOT NULL))",
                             "  AND layer.area_ha >= 0.2)",
                             "OR",
                             " ((layer.code_1_12 = 1 OR layer.code_1_18 = 1)",
                             "  AND layer.area_ha >= 0.25)",
                             "OR",
                             " ((layer.code_4_12 IN (1210, 1220, 6220, 9110, 9120)",
                             "   OR layer.code_4_18 IN (1210, 1220, 6220, 9110, 9120))",
                             "  AND layer.area_ha >= 0.1)",
                             "OR",
                             " (meta.cc_area IS NOT NULL",
                             "  AND meta.cc_area >= 0.5)",
                             "OR",
                             " (layer.comment_18 IS NOT NULL",
                             "  AND has_comment(layer.comment_18, ARRAY['Area size exception (inside RZ_AoI / outside UA Core Region)',",
                             "                                          'Area size exception (at RZ_AoI / UA Core Region boundary)']))"],
        "warning_where": ["FALSE"]
      }
    },
    {
      "check_ident": "qc_tool.vector.mmw",
      "required": false,
      "parameters": {
        "layers": ["rpz"],
        "mmw": 10.0,
        "general_where": "FALSE",
        "exception_where": "FALSE"
      }
    },
    {
      "check_ident": "qc_tool.vector.overlap",
      "required": false,
      "parameters": {
        "layers": ["rpz"]
      }
    },
    {
      "check_ident": "qc_tool.vector.neighbour",
      "required": false,
      "parameters": {
        "layers": ["rpz"],
        "code_column_names": ["code_4_12", "code_4_18", "comment_12", "comment_18"],
        "exception_where": [" (layer.ua_18 IS NULL AND other.ua_18 IS NULL)",
                            "AND",
                            " ((layer.ua_12 IS NULL) = (other.ua_12 IS NULL))",
                            "AND",
                            " ((layer.comment_12 IS NOT NULL",
                            "   AND has_comment(layer.comment_12, ARRAY['Braided river',",
                            "                                           'Different water levels',",
                            "                                           'Flooded area']))",
                            "  OR",
                            "  (layer.comment_18 IS NOT NULL",
                            "   AND has_comment(layer.comment_18, ARRAY['Braided river',",
                            "                                           'Different water levels',",
                            "                                           'Flooded area'])))"],
        "error_where": [" (layer.ua_18 IS NULL AND other.ua_18 IS NULL)",
                        "AND",
                        " ((layer.ua_12 IS NULL) = (other.ua_12 IS NULL))"]
      }
    }
  ]
}
