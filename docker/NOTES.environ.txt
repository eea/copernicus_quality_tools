Environment variables
=====================

The paths are passed unmodified to applications running inside service containers.
Therefore, all paths are must be formulated relative to container's inner filesystem.
Default values and environment setup can be found in source code at src/qc_tool/common.py:setup_config().

BEWARE!
Services interchange data among themselves through filesystem.
Interchange is realized by directory inside docker volume which is then shared by all services.
Therefore, it must be ensured the directories are accessible by all services.

How the directory configuration of particular service is set depends on how volume mapping is defined for the service.
In order to keep the configuration simple it is recommended to use the same volume mapping across all services.
Then the directory configuration will be the same for every service.
See the examples in source code at docker/docker-compose.*.yml.

Data interchange directories are:

  * PRODUCT_DIRS;
  * BOUNDARY_DIR;
  * INCOMING_DIR;
  * WORK_DIR;


Service qc_tool_frontend
------------------------

  * PRODUCT_DIRS, informs the frontend server where to look for product definition files; there may be multiple paths separated by colon;
  * BOUNDARY_DIR, instructs the frontend server where it should store boundary package;
  * INCOMING_DIR, instructs the frontend server where it should store uploaded files;
  * WORK_DIR, informs the frontend server where it should look for job output files;
  * SUBMISSION_DIR, if set instructs the frontend server where to put submissions, if not set or empty the feature is disabled;
  * FRONTEND_DB_PATH, informs the frontend server where to look for sqlite database, the database must exist;
      the original database file is created during docker build at /var/lib/qc_tool/frontend.sqlite;
  * SHOW_LOGO, informs the frontend server to put the Copernicus logo at web pages;
  * UPDATE_JOB_STATUSES, instructs the frontend deliveries page to auto-refresh job status info (yes or no);
  * UPDATE_JOB_STATUSES_INTERVAL, interval to refresh job statuses on frontend deliveries page (30000 miliseconds);
  * WORKER_ALIVE_TIMEOUT, timeout in seconds to wait for job status response from worker (5 seconds);
  * REFRESH_JOB_STATUSES_BACKGROUND, instructs the frontend server to refresh running job statuses in a background thread;
  * REFRESH_JOB_STATUSES_BACKGROUND_INTERVAL, interval to refresh job statuses on frontend server in background thread (60 seconds);


Service qc_tool_worker
----------------------

  * PRODUCT_DIRS, informs the job where to look for product definition files; there may be multiple paths separated by colon;
  * BOUNDARY_DIR, informs the check function where to look for boundary package;
  * INCOMING_DIR, informs the job where it should look for uploaded files;
  * PULL_JOB_URL, informs the scheduler where to pull a new job from;
  * WORK_DIR, instructs the running jobs where it should store its operational files;
  * PG_HOST, informs the jobs about the host name/ip address on which the postgresql server is running;
  * PG_PORT, informs the job about the tcp port on which the postgresql server is listening for connections;
  * PG_USER, informs the job which user name it should use when connecting to postgresql server;
  * PG_DATABASE, informs the job which database name it should use when connecting to postgresql server;
  * SHOW_LOGO, informs the worker to put Copernicus logo in pdf report;


Debugging parameters
--------------------

  * LEAVE_SCHEMA, if "yes" then job schema will not be dropped;
  * LEAVE_JOBDIR, if "yes" then job's working dir will not be removed;
  * SKIP_INSPIRE_CHECK, if "yes" then connecting to Inspire geoportal for metadata checks will be skipped; applies to tests only;
