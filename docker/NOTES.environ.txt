Environment variables
=====================

All paths are related to container point of view.
They are passed to applications running inside the containers.
Default values and environment setup is located at src/qc_tool/common.py:setup_config().
There is no path related to host viewpoint.


Service qc_tool_frontend
------------------------

  * INCOMING_DIR, instructs the frontend server where it should store uploaded files;
  * WPS_DIR, informs the frontend server where it should look for wps status files;
  * WORK_DIR, informs the frontend server where it should look for job output files;
  * FRONTEND_PORT, instructs the frontend server what port it should start listening for connections; this port is also published so that it can be reached from outside the container;
  * FRONTEND_DB_PATH, instructs the frontend server what sqlite database file to use, if the database file does not exist, it will be created;
  * SUBMISSION_ENABLED, instructs the frontend server that user is allowed to submit delivery to EEA;
  * WPS_URL, informs the frontend server of the url where the wps server can be reached;


Service qc_tool_wps
-------------------

  * BOUNDARY_DIR, informs the check function where to look for boundary vectors;
  * INCOMING_DIR, informs the job where it should look for uploaded files;
  * WPS_DIR, instructs the wps server where it should store its operational files;
  * WORK_DIR, instructs the running jobs where it should store its operational files;
  * WPS_PORT, instructs the wps server what port is should start listening for connections;
  * WPS_URL, informs the wps server of its own url;
  * WPS_OUTPUT_URL, informs the wps server of the url pointing to area of status documents;
  * PG_HOST, informs the jobs about the host name/ip address on which the postgresql server is running;
  * PG_PORT, informs the job about the tcp port on which the postgresql server is listening for connections;
  * PG_USER, informs the job which user name it should use when connecting to postgresql server;
  * PG_DATABASE, informs the job which database name it should use when connecting to postgresql server;
  * LEAVE_SCHEMA, if "yes" then job schema will not be dropped;
  * JOBDIR_EXIST_OK, if "yes" then job will not raise an error when the job's working directory already exists;
  * LEAVE_JOBDIR, if "yes" then job's working dir will not be removed;
